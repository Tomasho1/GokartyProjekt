// <auto-generated />
using System;
using GokartyProjekt.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GokartyProjekt.Migrations
{
    [DbContext(typeof(GokartyDbContext))]
    partial class GokartyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GokartyProjekt.Models.Adres", b =>
                {
                    b.Property<int>("IdAdres")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Panstwo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdAdres");

                    b.ToTable("Adresy");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Gokart", b =>
                {
                    b.Property<int>("IdGokart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdNadwozie")
                        .HasColumnType("int");

                    b.Property<int>("IdPodwozie")
                        .HasColumnType("int");

                    b.Property<int>("IdSilnik")
                        .HasColumnType("int");

                    b.Property<int>("IdTor")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Waga")
                        .HasColumnType("int");

                    b.HasKey("IdGokart");

                    b.HasIndex("IdNadwozie");

                    b.HasIndex("IdPodwozie");

                    b.HasIndex("IdSilnik");

                    b.HasIndex("IdTor");

                    b.ToTable("Gokarty");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Kierowca", b =>
                {
                    b.Property<int>("IdKierowca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdUzytkownik")
                        .HasColumnType("int");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumerKarty")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("Wiek")
                        .HasColumnType("int");

                    b.HasKey("IdKierowca");

                    b.HasIndex("IdUzytkownik")
                        .IsUnique();

                    b.ToTable("Kierowcy");
                });

            modelBuilder.Entity("GokartyProjekt.Models.KierowcaSponsor", b =>
                {
                    b.Property<int>("IdKierowca")
                        .HasColumnType("int");

                    b.Property<int>("IdSponsor")
                        .HasColumnType("int");

                    b.HasKey("IdKierowca", "IdSponsor");

                    b.HasIndex("IdSponsor");

                    b.ToTable("KierowcaSponsor");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Nadwozie", b =>
                {
                    b.Property<int>("IdNadwozie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Producent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNadwozie");

                    b.ToTable("Nadwozia");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Podwozie", b =>
                {
                    b.Property<int>("IdPodwozie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Producent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPodwozie");

                    b.ToTable("Podwozia");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Pracownik", b =>
                {
                    b.Property<int>("IdPracownik")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdTor")
                        .HasColumnType("int");

                    b.Property<int>("IdUzytkownik")
                        .HasColumnType("int");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stanowisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Wiek")
                        .HasColumnType("int");

                    b.Property<decimal>("Wynagrodzenie")
                        .HasColumnType("money");

                    b.HasKey("IdPracownik");

                    b.HasIndex("IdTor");

                    b.HasIndex("IdUzytkownik")
                        .IsUnique();

                    b.ToTable("Pracownicy");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Przejazd", b =>
                {
                    b.Property<int>("IdPrzejazd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Czas")
                        .HasColumnType("time");

                    b.Property<int>("IdGokart")
                        .HasColumnType("int");

                    b.Property<int>("IdKierowca")
                        .HasColumnType("int");

                    b.Property<int>("IdTor")
                        .HasColumnType("int");

                    b.HasKey("IdPrzejazd");

                    b.HasIndex("IdGokart");

                    b.HasIndex("IdKierowca");

                    b.HasIndex("IdTor");

                    b.ToTable("Przejazdy");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Silnik", b =>
                {
                    b.Property<int>("IdSilnik")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Moc")
                        .HasColumnType("int");

                    b.Property<double>("Pojemnosc")
                        .HasColumnType("float");

                    b.Property<string>("Producent")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdSilnik");

                    b.ToTable("Silniki");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Sponsor", b =>
                {
                    b.Property<int>("IdSponsor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSponsor");

                    b.ToTable("Sponsorzy");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Sprzet", b =>
                {
                    b.Property<int>("IdSprzet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdKierowca")
                        .HasColumnType("int");

                    b.Property<string>("Koszt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdSprzet");

                    b.HasIndex("IdKierowca");

                    b.ToTable("Sprzety");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Tor", b =>
                {
                    b.Property<int>("IdTor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Dlugosc")
                        .HasColumnType("float");

                    b.Property<int>("IdAdres")
                        .HasColumnType("int");

                    b.Property<int>("Nazwa")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<decimal>("StawkaGodzinowa")
                        .HasColumnType("money");

                    b.HasKey("IdTor");

                    b.HasIndex("IdAdres")
                        .IsUnique();

                    b.ToTable("Tory");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Uzytkownik", b =>
                {
                    b.Property<int>("IdUzytkownik")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Haslo")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("IdUzytkownik");

                    b.ToTable("Uzytkownicy");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Gokart", b =>
                {
                    b.HasOne("GokartyProjekt.Models.Nadwozie", "Nadwozie")
                        .WithMany("Gokarty")
                        .HasForeignKey("IdNadwozie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GokartyProjekt.Models.Podwozie", "Podwozie")
                        .WithMany("Gokarty")
                        .HasForeignKey("IdPodwozie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GokartyProjekt.Models.Silnik", "Silnik")
                        .WithMany("Gokarty")
                        .HasForeignKey("IdSilnik")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GokartyProjekt.Models.Tor", "Tor")
                        .WithMany("Gokarty")
                        .HasForeignKey("IdTor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GokartyProjekt.Models.Kierowca", b =>
                {
                    b.HasOne("GokartyProjekt.Models.Uzytkownik", "Uzytkownik")
                        .WithOne("Kierowca")
                        .HasForeignKey("GokartyProjekt.Models.Kierowca", "IdUzytkownik")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GokartyProjekt.Models.KierowcaSponsor", b =>
                {
                    b.HasOne("GokartyProjekt.Models.Kierowca", "Kierowca")
                        .WithMany("KierowcaSponsor")
                        .HasForeignKey("IdKierowca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GokartyProjekt.Models.Sponsor", "Sponsor")
                        .WithMany("KierowcaSponsor")
                        .HasForeignKey("IdSponsor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GokartyProjekt.Models.Pracownik", b =>
                {
                    b.HasOne("GokartyProjekt.Models.Tor", "Tor")
                        .WithMany("Pracownicy")
                        .HasForeignKey("IdTor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GokartyProjekt.Models.Uzytkownik", "Uzytkownik")
                        .WithOne("Pracownik")
                        .HasForeignKey("GokartyProjekt.Models.Pracownik", "IdUzytkownik")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GokartyProjekt.Models.Przejazd", b =>
                {
                    b.HasOne("GokartyProjekt.Models.Gokart", "Gokart")
                        .WithMany("Przejazdy")
                        .HasForeignKey("IdGokart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GokartyProjekt.Models.Kierowca", "Kierowca")
                        .WithMany("Przejazdy")
                        .HasForeignKey("IdKierowca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GokartyProjekt.Models.Tor", "Tor")
                        .WithMany("Przejazdy")
                        .HasForeignKey("IdTor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GokartyProjekt.Models.Sprzet", b =>
                {
                    b.HasOne("GokartyProjekt.Models.Kierowca", "Kierowca")
                        .WithMany("Sprzety")
                        .HasForeignKey("IdKierowca");
                });

            modelBuilder.Entity("GokartyProjekt.Models.Tor", b =>
                {
                    b.HasOne("GokartyProjekt.Models.Adres", "Adres")
                        .WithOne("Tor")
                        .HasForeignKey("GokartyProjekt.Models.Tor", "IdAdres")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
